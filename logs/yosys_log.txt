
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Running command `read_verilog ../source/top.v;  hierarchy 	-libdir ../source/clk  	-libdir ../source/dds  	-libdir ../source/effects  	-libdir ../source/fifo 	-libdir ../source/ram  	-libdir ../source/uart	-libdir ../source/detect_preamble	-libdir ../source/detect_bits	-libdir ../source/crc	-libdir ../source/encode	-libdir ../source;	synth_ice40 -noflatten; 	write_blif rfid-reader.blif; 	write_json rfid-reader.json;' --

1. Executing Verilog-2005 frontend: ../source/top.v
Parsing Verilog input from `../source/top.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Executing Verilog-2005 frontend: ../source/encode/pie_encoder.v
Parsing Verilog input from `../source/encode/pie_encoder.v' to AST representation.
Generating RTLIL representation for module `\pie_encoder'.
Successfully finished Verilog frontend.
Parameter \PW = 200
Parameter \ONE_PERIOD = 875
Parameter \ZERO_PERIOD = 500
Parameter \RTCAL = 1375
Parameter \TRCAL = 4000
Parameter \DELIMITER = 312

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\pie_encoder'.
Parameter \PW = 200
Parameter \ONE_PERIOD = 875
Parameter \ZERO_PERIOD = 500
Parameter \RTCAL = 1375
Parameter \TRCAL = 4000
Parameter \DELIMITER = 312
Generating RTLIL representation for module `$paramod$48d8f0d204e3efccc7451fa61b1bf90f8894a1f5\pie_encoder'.

2.3. Executing Verilog-2005 frontend: ../source/crc/crc5.v
Parsing Verilog input from `../source/crc/crc5.v' to AST representation.
Generating RTLIL representation for module `\crc5'.
Successfully finished Verilog frontend.

2.4. Executing Verilog-2005 frontend: ../source/ctrl_fsm.v
Parsing Verilog input from `../source/ctrl_fsm.v' to AST representation.
Generating RTLIL representation for module `\ctrl_fsm'.
Successfully finished Verilog frontend.
Parameter \RN16_TIMEOUT = 500000
Parameter \EPC_TIMEOUT = 5000000
Parameter \IDLE_TIMEOUT = 5000000

2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\ctrl_fsm'.
Parameter \RN16_TIMEOUT = 500000
Parameter \EPC_TIMEOUT = 5000000
Parameter \IDLE_TIMEOUT = 5000000
Generating RTLIL representation for module `$paramod$c81502f71d0e821359766aaf1715aac987edf899\ctrl_fsm'.

2.6. Executing Verilog-2005 frontend: ../source/crc/crc16.v
Parsing Verilog input from `../source/crc/crc16.v' to AST representation.
Generating RTLIL representation for module `\crc16'.
Successfully finished Verilog frontend.

2.7. Executing Verilog-2005 frontend: ../source/detect_bits/bits_detector.v
Parsing Verilog input from `../source/detect_bits/bits_detector.v' to AST representation.
Generating RTLIL representation for module `\bits_detector'.
Warning: Literal has a width of 3 bit, but value requires 4 bit. (../source/detect_bits/bits_detector.v:1)
Warning: Literal has a width of 3 bit, but value requires 4 bit. (../source/detect_bits/bits_detector.v:1)
Warning: Literal has a width of 3 bit, but value requires 4 bit. (../source/detect_bits/bits_detector.v:1)
Warning: Literal has a width of 3 bit, but value requires 4 bit. (../source/detect_bits/bits_detector.v:1)
Successfully finished Verilog frontend.
Parameter \LENGTH = 13
Parameter \BANKS = 9
Parameter \EL_GATES = 1

2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\bits_detector'.
Parameter \LENGTH = 13
Parameter \BANKS = 9
Parameter \EL_GATES = 1
Generating RTLIL representation for module `$paramod\bits_detector\LENGTH=13\BANKS=9\EL_GATES=1'.

2.9. Executing Verilog-2005 frontend: ../source/detect_preamble/preamble_detector.v
Parsing Verilog input from `../source/detect_preamble/preamble_detector.v' to AST representation.
Generating RTLIL representation for module `\preamble_detector'.
Successfully finished Verilog frontend.
Parameter \LENGTH = 80
Parameter \BANKS = 9
Parameter \HI_THRESHOLD = 65
Parameter \LO_THRESHOLD = 60
Parameter \SCALING_BITS = 5

2.10. Executing AST frontend in derive mode using pre-parsed AST for module `\preamble_detector'.
Parameter \LENGTH = 80
Parameter \BANKS = 9
Parameter \HI_THRESHOLD = 65
Parameter \LO_THRESHOLD = 60
Parameter \SCALING_BITS = 5
Generating RTLIL representation for module `$paramod$93c8cbcacd094632f4a1a03fdf5ab2c8c9ed3e51\preamble_detector'.

2.11. Executing Verilog-2005 frontend: ../source/clk/sampler.v
Parsing Verilog input from `../source/clk/sampler.v' to AST representation.
Generating RTLIL representation for module `\sampler'.
Successfully finished Verilog frontend.
Parameter \N = 50

2.12. Executing AST frontend in derive mode using pre-parsed AST for module `\sampler'.
Parameter \N = 50
Generating RTLIL representation for module `$paramod\sampler\N=50'.

2.13. Executing Verilog-2005 frontend: ../source/clk/lattice_pll.v
Parsing Verilog input from `../source/clk/lattice_pll.v' to AST representation.
Generating RTLIL representation for module `\lattice_pll'.
Successfully finished Verilog frontend.

2.14. Executing Verilog-2005 frontend: ../source/clk/strb_gen.v
Parsing Verilog input from `../source/clk/strb_gen.v' to AST representation.
Generating RTLIL representation for module `\strb_gen'.
Successfully finished Verilog frontend.
Parameter \N = 10

2.15. Executing AST frontend in derive mode using pre-parsed AST for module `\strb_gen'.
Parameter \N = 10
Generating RTLIL representation for module `$paramod\strb_gen\N=10'.

2.16. Executing Verilog-2005 frontend: ../source/fifo/sync_fifo.v
Parsing Verilog input from `../source/fifo/sync_fifo.v' to AST representation.
Generating RTLIL representation for module `\sync_fifo'.
Successfully finished Verilog frontend.
Parameter \ADDR_WIDTH = 15
Parameter \DATA_WIDTH = 1

2.17. Executing AST frontend in derive mode using pre-parsed AST for module `\sync_fifo'.
Parameter \ADDR_WIDTH = 15
Parameter \DATA_WIDTH = 1
Generating RTLIL representation for module `$paramod\sync_fifo\ADDR_WIDTH=15\DATA_WIDTH=1'.

2.18. Executing Verilog-2005 frontend: ../source/detect_preamble/preamble_correlator.v
Parsing Verilog input from `../source/detect_preamble/preamble_correlator.v' to AST representation.
Generating RTLIL representation for module `\preamble_correlator'.
Warning: Literal has a width of 64 bit, but value requires 68 bit. (../source/detect_preamble/preamble_correlator.v:1)
Warning: Literal has a width of 64 bit, but value requires 72 bit. (../source/detect_preamble/preamble_correlator.v:1)
Warning: Literal has a width of 64 bit, but value requires 76 bit. (../source/detect_preamble/preamble_correlator.v:1)
Warning: Literal has a width of 64 bit, but value requires 80 bit. (../source/detect_preamble/preamble_correlator.v:1)
../source/detect_preamble/preamble_correlator.v:59: ERROR: 2nd expression of generate for-loop is not constant!
